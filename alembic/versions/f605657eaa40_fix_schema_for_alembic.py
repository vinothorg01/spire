"""fix schema for alembic

Revision ID: f605657eaa40
Revises: 9d530cbdb236
Create Date: 2020-10-26 16:49:24.128973

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f605657eaa40'
down_revision = '9d530cbdb236'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('training_schedule')
    op.drop_table('demo')
    op.drop_table('model_training_status')
    op.drop_table('recipes')
    op.drop_table('spire_scheduler')
    op.drop_table('spire_recipes')
    op.drop_table('outputs')
    op.drop_table('training_set_assembly_status')
    op.drop_table('tasks')
    op.drop_table('workflow_models')
    op.drop_table('segments')
    op.drop_table('assembly_history')
    op.drop_table('workflow_outputs')
    op.drop_table('training_history')
    op.drop_table('trait_recipes')
    op.drop_table('scoring_history')
    op.drop_table('model_scoring_status')
    op.drop_table('models')
    op.drop_constraint('assembly_status_id_fkey',
                       'assembly_status', type_='foreignkey')
    op.create_foreign_key(None, 'assembly_status', 'cluster_status', [
                          'id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(None, 'cluster_status', ['id'])
    op.drop_constraint('cluster_status_workflow_id_fkey',
                       'cluster_status', type_='foreignkey')
    op.create_foreign_key(None, 'cluster_status', 'workflows', [
                          'workflow_id'], ['id'], ondelete='CASCADE')
    op.alter_column('datasets', 'definition',
                    existing_type=postgresql.JSONB(astext_type=sa.Text()),
                    nullable=True)
    op.drop_index('idx_datasets_id', table_name='datasets')
    op.alter_column('history', 'info',
                    existing_type=postgresql.JSONB(astext_type=sa.Text()),
                    nullable=False)
    op.alter_column('history', 'stats',
                    existing_type=postgresql.JSONB(astext_type=sa.Text()),
                    nullable=False)
    op.alter_column('history', 'status',
                    existing_type=sa.VARCHAR(length=50),
                    nullable=False)
    op.alter_column('history', 'warnings',
                    existing_type=postgresql.JSONB(astext_type=sa.Text()),
                    nullable=False)
    op.alter_column('history', 'workflow_id',
                    existing_type=postgresql.UUID(),
                    nullable=True)
    op.drop_index('idx_history_arg_date_status_stage', table_name='history')
    op.drop_index('idx_history_id', table_name='history')
    op.drop_index('idx_history_workflow_id', table_name='history')
    op.create_foreign_key(None, 'history', 'workflows', [
                          'workflow_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(None, 'postprocess', ['id'])
    op.create_foreign_key(None, 'postprocess', 'workflows', [
                          'workflow_id'], ['id'], ondelete='CASCADE')
    op.drop_index('idx_schedules_workflow_id', table_name='schedules')
    op.create_foreign_key(None, 'schedules', 'workflows', [
                          'workflow_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('scoring_status_id_fkey',
                       'scoring_status', type_='foreignkey')
    op.create_foreign_key(None, 'scoring_status', 'cluster_status', [
                          'id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(None, 'tags', ['id'])
    op.create_foreign_key(None, 'thresholds', 'postprocess', [
                          'id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('training_status_id_fkey',
                       'training_status', type_='foreignkey')
    op.create_foreign_key(None, 'training_status', 'cluster_status', [
                          'id'], ['id'], ondelete='CASCADE')
    op.alter_column('trait_workflows', 'trait_id',
                    existing_type=sa.INTEGER(),
                    nullable=True)
    op.drop_constraint('trait_workflows_workflow_id_key',
                       'trait_workflows', type_='unique')
    op.create_foreign_key(None, 'trait_workflows', 'workflows', [
                          'workflow_id'], ['id'], ondelete='CASCADE')
    op.alter_column('workflow_datasets', 'dataset_id',
                    existing_type=postgresql.UUID(),
                    nullable=True)
    op.alter_column('workflow_datasets', 'workflow_id',
                    existing_type=postgresql.UUID(),
                    nullable=True)
    op.drop_index('idx_workflows_datasets_workflow_id',
                  table_name='workflow_datasets')
    op.create_foreign_key(None, 'workflow_datasets', 'workflows', [
                          'workflow_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'workflow_datasets', 'datasets', [
                          'dataset_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('workflow_features_workflow_id_fkey',
                       'workflow_features', type_='foreignkey')
    op.drop_constraint('workflow_features_features_id_fkey',
                       'workflow_features', type_='foreignkey')
    op.create_foreign_key(None, 'workflow_features', 'features', [
                          'features_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'workflow_features', 'workflows', [
                          'workflow_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('workflow_tags_workflow_id_fkey',
                       'workflow_tags', type_='foreignkey')
    op.drop_constraint('workflow_tags_tag_id_fkey',
                       'workflow_tags', type_='foreignkey')
    op.create_foreign_key(None, 'workflow_tags', 'tags', [
                          'tag_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'workflow_tags', 'workflows', [
                          'workflow_id'], ['id'], ondelete='CASCADE')
    op.alter_column('workflows', 'description',
                    existing_type=sa.TEXT(),
                    nullable=False)
    op.alter_column('workflows', 'enabled',
                    existing_type=sa.BOOLEAN(),
                    nullable=False,
                    existing_server_default=sa.text('false'))
    op.alter_column('workflows', 'is_proxy',
                    existing_type=sa.BOOLEAN(),
                    nullable=False,
                    existing_server_default=sa.text('false'))
    op.alter_column('workflows', 'name',
                    existing_type=sa.VARCHAR(length=100),
                    nullable=False)
    op.drop_index('idx_workflows_id', table_name='workflows')
    op.create_unique_constraint(None, 'workflows', ['name'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'workflows', type_='unique')
    op.create_index('idx_workflows_id', 'workflows', ['id'], unique=False)
    op.alter_column('workflows', 'name',
                    existing_type=sa.VARCHAR(length=100),
                    nullable=True)
    op.alter_column('workflows', 'is_proxy',
                    existing_type=sa.BOOLEAN(),
                    nullable=True,
                    existing_server_default=sa.text('false'))
    op.alter_column('workflows', 'enabled',
                    existing_type=sa.BOOLEAN(),
                    nullable=True,
                    existing_server_default=sa.text('false'))
    op.alter_column('workflows', 'description',
                    existing_type=sa.TEXT(),
                    nullable=True)
    op.drop_constraint(None, 'workflow_tags', type_='foreignkey')
    op.drop_constraint(None, 'workflow_tags', type_='foreignkey')
    op.create_foreign_key('workflow_tags_tag_id_fkey',
                          'workflow_tags', 'tags', ['tag_id'], ['id'])
    op.create_foreign_key('workflow_tags_workflow_id_fkey',
                          'workflow_tags', 'workflows', ['workflow_id'], ['id'])
    op.drop_constraint(None, 'workflow_features', type_='foreignkey')
    op.drop_constraint(None, 'workflow_features', type_='foreignkey')
    op.create_foreign_key('workflow_features_features_id_fkey',
                          'workflow_features', 'features', ['features_id'], ['id'])
    op.create_foreign_key('workflow_features_workflow_id_fkey',
                          'workflow_features', 'workflows', ['workflow_id'], ['id'])
    op.drop_constraint(None, 'workflow_datasets', type_='foreignkey')
    op.drop_constraint(None, 'workflow_datasets', type_='foreignkey')
    op.create_index('idx_workflows_datasets_workflow_id',
                    'workflow_datasets', ['workflow_id'], unique=False)
    op.alter_column('workflow_datasets', 'workflow_id',
                    existing_type=postgresql.UUID(),
                    nullable=False)
    op.alter_column('workflow_datasets', 'dataset_id',
                    existing_type=postgresql.UUID(),
                    nullable=False)
    op.drop_constraint(None, 'trait_workflows', type_='foreignkey')
    op.create_unique_constraint(
        'trait_workflows_workflow_id_key', 'trait_workflows', ['workflow_id'])
    op.alter_column('trait_workflows', 'trait_id',
                    existing_type=sa.INTEGER(),
                    nullable=False)
    op.drop_constraint(None, 'training_status', type_='foreignkey')
    op.create_foreign_key('training_status_id_fkey',
                          'training_status', 'cluster_status', ['id'], ['id'])
    op.drop_constraint(None, 'thresholds', type_='foreignkey')
    op.drop_constraint(None, 'tags', type_='unique')
    op.drop_constraint(None, 'scoring_status', type_='foreignkey')
    op.create_foreign_key('scoring_status_id_fkey',
                          'scoring_status', 'cluster_status', ['id'], ['id'])
    op.drop_constraint(None, 'schedules', type_='foreignkey')
    op.create_index('idx_schedules_workflow_id', 'schedules',
                    ['workflow_id'], unique=False)
    op.drop_constraint(None, 'postprocess', type_='foreignkey')
    op.drop_constraint(None, 'postprocess', type_='unique')
    op.drop_constraint(None, 'history', type_='foreignkey')
    op.create_index('idx_history_workflow_id', 'history',
                    ['workflow_id'], unique=False)
    op.create_index('idx_history_id', 'history', ['id'], unique=False)
    op.create_index('idx_history_arg_date_status_stage', 'history', [
                    'arg_date', 'status', 'stage'], unique=False)
    op.alter_column('history', 'workflow_id',
                    existing_type=postgresql.UUID(),
                    nullable=False)
    op.alter_column('history', 'warnings',
                    existing_type=postgresql.JSONB(astext_type=sa.Text()),
                    nullable=True)
    op.alter_column('history', 'status',
                    existing_type=sa.VARCHAR(length=50),
                    nullable=True)
    op.alter_column('history', 'stats',
                    existing_type=postgresql.JSONB(astext_type=sa.Text()),
                    nullable=True)
    op.alter_column('history', 'info',
                    existing_type=postgresql.JSONB(astext_type=sa.Text()),
                    nullable=True)
    op.create_index('idx_datasets_id', 'datasets', ['id'], unique=False)
    op.alter_column('datasets', 'definition',
                    existing_type=postgresql.JSONB(astext_type=sa.Text()),
                    nullable=False)
    op.drop_constraint(None, 'cluster_status', type_='foreignkey')
    op.create_foreign_key('cluster_status_workflow_id_fkey',
                          'cluster_status', 'workflows', ['workflow_id'], ['id'])
    op.drop_constraint(None, 'cluster_status', type_='unique')
    op.drop_constraint(None, 'assembly_status', type_='foreignkey')
    op.create_foreign_key('assembly_status_id_fkey',
                          'assembly_status', 'cluster_status', ['id'], ['id'])
    op.create_table('models',
                    sa.Column('id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('definition', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False)
                    )

    op.create_table('model_scoring_status',
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('run_id', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=False),
                    sa.Column('scoring_response', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('last_scored', sa.DATE(),
                              autoincrement=False, nullable=True),
                    sa.Column('ready_to_process', sa.BOOLEAN(), server_default=sa.text(
                        'false'), autoincrement=False, nullable=False),
                    sa.UniqueConstraint(
                        'run_id', name='model_scoring_status_run_id_key'),
                    sa.UniqueConstraint(
                        'trait_id', name='model_scoring_status_trait_id_key')
                    )
    op.create_table('scoring_history',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('mlflow_run_id', sa.VARCHAR(length=75),
                              autoincrement=False, nullable=True),
                    sa.Column('run_time', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('recipe', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('info', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('warnings', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('status', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=True),
                    sa.Column('processing_time', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('notebook_url', sa.VARCHAR(length=200),
                              autoincrement=False, nullable=True),
                    sa.Column('error', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('traceback', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='scoring_history_pkey')
                    )
    op.create_table('trait_recipes',
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('trait_name', sa.VARCHAR(length=200),
                              autoincrement=False, nullable=False),
                    sa.Column('recipe', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('vendor', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.Column('spire_id', postgresql.UUID(),
                              autoincrement=False, nullable=True),
                    sa.UniqueConstraint(
                        'trait_id', name='trait_recipes_trait_id_key')
                    )
    op.create_table('training_history',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('mlflow_run_id', sa.VARCHAR(length=75),
                              autoincrement=False, nullable=True),
                    sa.Column('run_time', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('recipe', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('info', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('warnings', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('status', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=True),
                    sa.Column('processing_time', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('notebook_url', sa.VARCHAR(length=200),
                              autoincrement=False, nullable=True),
                    sa.Column('error', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('traceback', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='training_history_pkey')
                    )
    op.create_table('workflow_outputs',
                    sa.Column('workflow_id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('output_id', postgresql.UUID(),
                              autoincrement=False, nullable=False)
                    )
    op.create_table('assembly_history',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('mlflow_run_id', sa.VARCHAR(length=75),
                              autoincrement=False, nullable=True),
                    sa.Column('run_time', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('recipe', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('info', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('warnings', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=True),
                    sa.Column('status', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=True),
                    sa.Column('processing_time', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('notebook_url', sa.VARCHAR(length=200),
                              autoincrement=False, nullable=True),
                    sa.Column('error', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('traceback', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='assembly_history_pkey')
                    )
    op.create_table('segments',
                    sa.Column('id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=False),
                    sa.Column('categories', postgresql.ARRAY(sa.VARCHAR()),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='segments_pkey')
                    )
    op.create_table('workflow_models',
                    sa.Column('workflow_id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('model_id', postgresql.UUID(),
                              autoincrement=False, nullable=False)
                    )
    op.create_table('tasks',
                    sa.Column('id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=True),
                    sa.Column('description', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', sa.DATE(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=True),
                    sa.Column('modified_at', sa.DATE(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=True),
                    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text(
                        'false'), autoincrement=False, nullable=True)
                    )
    op.create_table('training_set_assembly_status',
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('assembly_response', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('train_set_last_assembled', sa.DATE(),
                              autoincrement=False, nullable=True),
                    sa.Column('ready_to_train', sa.BOOLEAN(), server_default=sa.text(
                        'false'), autoincrement=False, nullable=False),
                    sa.UniqueConstraint(
                        'trait_id', name='training_set_assembly_status_trait_id_key')
                    )
    op.create_table('outputs',
                    sa.Column('id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('definition', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False)
                    )
    op.create_table('spire_recipes',
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('spire_id', postgresql.UUID(),
                              autoincrement=False, nullable=False),
                    sa.Column('trait_name', sa.VARCHAR(length=200),
                              autoincrement=False, nullable=False),
                    sa.Column('recipe', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('vendor', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.UniqueConstraint(
                        'trait_id', name='spire_recipes_trait_id_key')
                    )
    op.create_table('spire_scheduler',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('trait_name', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=False),
                    sa.Column('run_id', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=True),
                    sa.Column('response', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('last_run', postgresql.TIMESTAMP(),
                              autoincrement=False, nullable=True),
                    sa.Column('ready', sa.BOOLEAN(), server_default=sa.text(
                        'false'), autoincrement=False, nullable=False),
                    sa.Column('project_type', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.Column('process_name', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.UniqueConstraint('id', name='spire_scheduler_id_key'),
                    sa.UniqueConstraint(
                        'run_id', name='spire_scheduler_run_id_key'),
                    sa.UniqueConstraint(
                        'trait_id', name='spire_scheduler_trait_id_key'),
                    sa.UniqueConstraint(
                        'trait_name', name='spire_scheduler_trait_name_key')
                    )
    op.create_table('recipes',
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('trait_name', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=False),
                    sa.Column('recipe', postgresql.JSONB(astext_type=sa.Text()),
                              autoincrement=False, nullable=False),
                    sa.Column('vendor', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.UniqueConstraint(
                        'trait_id', name='recipes_trait_id_key')
                    )
    op.create_table('model_training_status',
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('run_id', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=False),
                    sa.Column('training_response', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('last_trained', sa.DATE(),
                              autoincrement=False, nullable=True),
                    sa.Column('ready_to_score', sa.BOOLEAN(), server_default=sa.text(
                        'false'), autoincrement=False, nullable=False),
                    sa.UniqueConstraint(
                        'run_id', name='model_training_status_run_id_key'),
                    sa.UniqueConstraint(
                        'trait_id', name='model_training_status_trait_id_key')
                    )
    op.create_table('demo',
                    sa.Column('run_id', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=False),
                    sa.Column('target', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=False),
                    sa.Column('brand', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=False),
                    sa.Column('training_response', postgresql.JSONB(
                        astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('last_trained', sa.VARCHAR(length=100),
                              autoincrement=False, nullable=True),
                    sa.UniqueConstraint('run_id', name='demo_run_id_key')
                    )
    op.create_table('training_schedule',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('trait_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('run_interval', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.Column('start_date', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=True),
                    sa.UniqueConstraint('id', name='training_schedule_id_key')
                    )
    # ### end Alembic commands ###
